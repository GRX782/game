<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üéÆ Cosmic Runner - El Poder de la Programaci√≥n</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: linear-gradient(45deg, #0f0f23, #1a1a3a, #2d1b69);
            font-family: 'Arial', sans-serif;
            color: white;
            overflow: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }

        .game-container {
            position: relative;
            width: 100vw;
            height: 100vh;
        }

        canvas {
            display: block;
            background: linear-gradient(180deg, #0a0a2e, #16213e, #0f3460);
            border: 2px solid #00ffff;
            box-shadow: 0 0 50px #00ffff40;
        }

        .ui {
            position: absolute;
            top: 20px;
            left: 20px;
            z-index: 10;
        }

        .score {
            font-size: 24px;
            font-weight: bold;
            text-shadow: 0 0 10px #00ffff;
            margin-bottom: 10px;
        }

        .instructions {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            background: rgba(0, 0, 0, 0.8);
            padding: 30px;
            border-radius: 15px;
            border: 2px solid #00ffff;
            box-shadow: 0 0 30px #00ffff40;
            z-index: 20;
        }

        .instructions h2 {
            color: #00ffff;
            margin-bottom: 20px;
            font-size: 28px;
            text-shadow: 0 0 10px #00ffff;
        }

        .instructions p {
            margin: 10px 0;
            font-size: 16px;
            line-height: 1.5;
        }

        .start-btn {
            background: linear-gradient(45deg, #ff6b6b, #ff8e8e);
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            color: white;
            font-size: 18px;
            font-weight: bold;
            cursor: pointer;
            margin-top: 20px;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(255, 107, 107, 0.4);
        }

        .start-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(255, 107, 107, 0.6);
        }

        .game-over {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            background: rgba(0, 0, 0, 0.9);
            padding: 40px;
            border-radius: 15px;
            border: 2px solid #ff6b6b;
            box-shadow: 0 0 30px #ff6b6b40;
            z-index: 30;
            display: none;
        }

        .game-over h2 {
            color: #ff6b6b;
            margin-bottom: 20px;
            font-size: 32px;
            text-shadow: 0 0 10px #ff6b6b;
        }

        .programming-message {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            text-align: center;
            background: rgba(0, 255, 255, 0.1);
            padding: 15px 25px;
            border-radius: 10px;
            border: 1px solid #00ffff;
            backdrop-filter: blur(10px);
        }

        .programming-message p {
            margin: 5px 0;
            font-size: 14px;
            color: #00ffff;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }

        .pulse {
            animation: pulse 2s infinite;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <canvas id="gameCanvas"></canvas>
        
        <div class="ui">
            <div class="score">Puntuaci√≥n: <span id="scoreValue">0</span></div>
            <div class="score">Nivel: <span id="levelValue">1</span></div>
        </div>

        <div class="instructions" id="instructions">
            <h2>üöÄ COSMIC RUNNER üöÄ</h2>
            <p><strong>¬°Bienvenido al poder de la programaci√≥n!</strong></p>
            <p>üéØ Controla la nave espacial con las flechas ‚Üë‚Üì</p>
            <p>‚≠ê Recolecta estrellas doradas para ganar puntos</p>
            <p>üíé Los cristales azules te dan puntos extra</p>
            <p>üî• Evita los meteoros rojos</p>
            <p>üí® La velocidad aumenta cada nivel</p>
            <p><em>Este juego demuestra: f√≠sica, colisiones, part√≠culas, animaciones, sonido y m√°s...</em></p>
            <button class="start-btn" onclick="startGame()">üöÄ INICIAR AVENTURA</button>
        </div>

        <div class="game-over" id="gameOver">
            <h2>üí• GAME OVER üí•</h2>
            <p>Tu puntuaci√≥n final: <span id="finalScore">0</span></p>
            <p>Nivel alcanzado: <span id="finalLevel">1</span></p>
            <button class="start-btn" onclick="restartGame()">üîÑ JUGAR DE NUEVO</button>
        </div>

        <div class="programming-message pulse">
            <p><strong>üíª Creado con HTML5 Canvas, JavaScript y CSS</strong></p>
            <p>üåü F√≠sica realista ‚Ä¢ Part√≠culas ‚Ä¢ Animaciones ‚Ä¢ Detecci√≥n de colisiones</p>
            <p><em>¬°Esto es solo el comienzo de lo que puedes crear programando!</em></p>
        </div>
    </div>

    <script>
        // Configuraci√≥n del juego
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        
        // Ajustar canvas al tama√±o de la ventana
        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        }
        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);

        // Variables del juego
        let gameRunning = false;
        let gameSpeed = 2;
        let score = 0;
        let level = 1;
        let particles = [];
        let stars = [];
        let crystals = [];
        let meteors = [];

        // Jugador (nave espacial)
        const player = {
            x: 100,
            y: canvas.height / 2,
            width: 40,
            height: 30,
            speed: 5,
            dy: 0,
            trail: []
        };

        // Controles
        const keys = {};
        document.addEventListener('keydown', (e) => {
            keys[e.code] = true;
        });
        document.addEventListener('keyup', (e) => {
            keys[e.code] = false;
        });

        // Clase para part√≠culas
        class Particle {
            constructor(x, y, color, size = 3, speedX = 0, speedY = 0) {
                this.x = x;
                this.y = y;
                this.color = color;
                this.size = size;
                this.speedX = speedX + (Math.random() - 0.5) * 4;
                this.speedY = speedY + (Math.random() - 0.5) * 4;
                this.life = 1.0;
                this.decay = Math.random() * 0.02 + 0.02;
            }

            update() {
                this.x += this.speedX;
                this.y += this.speedY;
                this.life -= this.decay;
                this.size *= 0.98;
            }

            draw() {
                if (this.size <= 0) return; // Evitar radios negativos
                ctx.save();
                ctx.globalAlpha = this.life;
                ctx.fillStyle = this.color;
                ctx.beginPath();
                ctx.arc(this.x, this.y, Math.max(0.1, this.size), 0, Math.PI * 2);
                ctx.fill();
                ctx.restore();
            }
        }

        // Clase para objetos del juego
        class GameObject {
            constructor(x, y, width, height, color, speed) {
                this.x = x;
                this.y = y;
                this.width = width;
                this.height = height;
                this.color = color;
                this.speed = speed;
                this.angle = 0;
            }

            update() {
                this.x -= this.speed + gameSpeed;
                this.angle += 0.1;
            }

            draw() {
                ctx.save();
                ctx.translate(this.x + this.width/2, this.y + this.height/2);
                ctx.rotate(this.angle);
                
                if (this.color === 'gold') {
                    // Estrella dorada
                    this.drawStar();
                } else if (this.color === '#00ffff') {
                    // Cristal azul
                    this.drawCrystal();
                } else {
                    // Meteoro
                    this.drawMeteor();
                }
                ctx.restore();
            }

            drawStar() {
                ctx.fillStyle = 'gold';
                ctx.strokeStyle = '#ffff00';
                ctx.lineWidth = 2;
                ctx.beginPath();
                for (let i = 0; i < 5; i++) {
                    const angle = (i * Math.PI * 2) / 5 - Math.PI / 2;
                    const x = Math.cos(angle) * this.width / 2;
                    const y = Math.sin(angle) * this.height / 2;
                    if (i === 0) ctx.moveTo(x, y);
                    else ctx.lineTo(x, y);
                    
                    const innerAngle = ((i + 0.5) * Math.PI * 2) / 5 - Math.PI / 2;
                    const innerX = Math.cos(innerAngle) * this.width / 4;
                    const innerY = Math.sin(innerAngle) * this.height / 4;
                    ctx.lineTo(innerX, innerY);
                }
                ctx.closePath();
                ctx.fill();
                ctx.stroke();
            }

            drawCrystal() {
                ctx.fillStyle = '#00ffff';
                ctx.strokeStyle = '#ffffff';
                ctx.lineWidth = 2;
                ctx.beginPath();
                ctx.moveTo(0, -this.height/2);
                ctx.lineTo(this.width/3, -this.height/6);
                ctx.lineTo(this.width/2, this.height/3);
                ctx.lineTo(0, this.height/2);
                ctx.lineTo(-this.width/2, this.height/3);
                ctx.lineTo(-this.width/3, -this.height/6);
                ctx.closePath();
                ctx.fill();
                ctx.stroke();
            }

            drawMeteor() {
                ctx.fillStyle = '#ff4444';
                ctx.strokeStyle = '#ff0000';
                ctx.lineWidth = 2;
                ctx.beginPath();
                ctx.arc(0, 0, Math.max(0.1, this.width/2), 0, Math.PI * 2);
                ctx.fill();
                ctx.stroke();
                
                // Efectos de fuego
                for (let i = 0; i < 3; i++) {
                    const offset = (Math.sin(Date.now() * 0.01 + i) * 5);
                    ctx.fillStyle = `hsl(${15 + Math.random() * 30}, 100%, ${50 + Math.random() * 30}%)`;
                    ctx.beginPath();
                    ctx.arc(this.width/3 + offset, offset, Math.max(0.1, 3), 0, Math.PI * 2);
                    ctx.fill();
                }
            }

            isOffScreen() {
                return this.x + this.width < 0;
            }
        }

        // Funci√≥n para dibujar la nave del jugador
        function drawPlayer() {
            // Estela de la nave
            player.trail.push({x: player.x, y: player.y + player.height/2, life: 1.0});
            if (player.trail.length > 10) player.trail.shift();
            
            for (let i = 0; i < player.trail.length; i++) {
                const trail = player.trail[i];
                trail.life -= 0.1;
                ctx.save();
                ctx.globalAlpha = trail.life;
                ctx.fillStyle = '#00ffff';
                ctx.beginPath();
                ctx.arc(trail.x, trail.y, Math.max(0.1, trail.life * 5), 0, Math.PI * 2);
                ctx.fill();
                ctx.restore();
            }

            // Nave principal
            ctx.save();
            ctx.translate(player.x + player.width/2, player.y + player.height/2);
            
            // Cuerpo de la nave
            ctx.fillStyle = '#00ffff';
            ctx.beginPath();
            ctx.moveTo(15, 0);
            ctx.lineTo(-15, -10);
            ctx.lineTo(-10, -5);
            ctx.lineTo(-10, 5);
            ctx.lineTo(-15, 10);
            ctx.closePath();
            ctx.fill();
            
            // Detalles brillantes
            ctx.fillStyle = '#ffffff';
            ctx.beginPath();
            ctx.arc(5, 0, Math.max(0.1, 3), 0, Math.PI * 2);
            ctx.fill();
            
            // Motor/propulsor
            ctx.fillStyle = '#ff6b6b';
            ctx.beginPath();
            ctx.moveTo(-15, -5);
            ctx.lineTo(-25, -2);
            ctx.lineTo(-25, 2);
            ctx.lineTo(-15, 5);
            ctx.closePath();
            ctx.fill();
            
            ctx.restore();
        }

        // Funci√≥n para crear objetos aleatorios
        function spawnObjects() {
            if (Math.random() < 0.02) {
                stars.push(new GameObject(canvas.width, Math.random() * (canvas.height - 100) + 50, 25, 25, 'gold', 1));
            }
            if (Math.random() < 0.015) {
                crystals.push(new GameObject(canvas.width, Math.random() * (canvas.height - 100) + 50, 20, 20, '#00ffff', 1));
            }
            if (Math.random() < 0.018) {
                meteors.push(new GameObject(canvas.width, Math.random() * (canvas.height - 100) + 50, 30, 30, '#ff4444', 2));
            }
        }

        // Funci√≥n de detecci√≥n de colisiones
        function checkCollisions() {
            // Colisiones con estrellas
            for (let i = stars.length - 1; i >= 0; i--) {
                const star = stars[i];
                if (player.x < star.x + star.width &&
                    player.x + player.width > star.x &&
                    player.y < star.y + star.height &&
                    player.y + player.height > star.y) {
                    
                    // Crear part√≠culas doradas
                    for (let j = 0; j < 15; j++) {
                        particles.push(new Particle(star.x + star.width/2, star.y + star.height/2, 'gold', 4));
                    }
                    
                    stars.splice(i, 1);
                    score += 100;
                    updateUI();
                }
            }

            // Colisiones con cristales
            for (let i = crystals.length - 1; i >= 0; i--) {
                const crystal = crystals[i];
                if (player.x < crystal.x + crystal.width &&
                    player.x + player.width > crystal.x &&
                    player.y < crystal.y + crystal.height &&
                    player.y + player.height > crystal.y) {
                    
                    // Crear part√≠culas azules
                    for (let j = 0; j < 20; j++) {
                        particles.push(new Particle(crystal.x + crystal.width/2, crystal.y + crystal.height/2, '#00ffff', 5));
                    }
                    
                    crystals.splice(i, 1);
                    score += 250;
                    updateUI();
                }
            }

            // Colisiones con meteoros (game over)
            for (let i = meteors.length - 1; i >= 0; i--) {
                const meteor = meteors[i];
                if (player.x < meteor.x + meteor.width &&
                    player.x + player.width > meteor.x &&
                    player.y < meteor.y + meteor.height &&
                    player.y + player.height > meteor.y) {
                    
                    // Crear explosi√≥n
                    for (let j = 0; j < 30; j++) {
                        particles.push(new Particle(
                            player.x + player.width/2, 
                            player.y + player.height/2, 
                            '#ff4444', 
                            8,
                            (Math.random() - 0.5) * 10,
                            (Math.random() - 0.5) * 10
                        ));
                    }
                    
                    gameOver();
                    return;
                }
            }
        }

        // Funci√≥n para actualizar la interfaz
        function updateUI() {
            document.getElementById('scoreValue').textContent = score;
            
            // Aumentar nivel cada 1000 puntos
            const newLevel = Math.floor(score / 1000) + 1;
            if (newLevel !== level) {
                level = newLevel;
                gameSpeed += 0.5;
                document.getElementById('levelValue').textContent = level;
            }
        }

        // Funci√≥n para dibujar el fondo estrellado
        function drawBackground() {
            // Estrellas de fondo
            ctx.fillStyle = '#ffffff';
            for (let i = 0; i < 100; i++) {
                const x = (i * 137.5 + Date.now() * 0.1) % canvas.width;
                const y = (i * 73.7) % canvas.height;
                const size = Math.max(0.1, Math.sin(i + Date.now() * 0.005) * 2 + 1);
                
                ctx.save();
                ctx.globalAlpha = 0.8;
                ctx.beginPath();
                ctx.arc(x, y, size, 0, Math.PI * 2);
                ctx.fill();
                ctx.restore();
            }
        }

        // Bucle principal del juego
        function gameLoop() {
            if (!gameRunning) return;

            // Limpiar canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Dibujar fondo
            drawBackground();

            // Mover jugador
            if (keys['ArrowUp'] && player.y > 0) {
                player.dy = -player.speed;
            } else if (keys['ArrowDown'] && player.y < canvas.height - player.height) {
                player.dy = player.speed;
            } else {
                player.dy *= 0.8; // Desaceleraci√≥n suave
            }
            
            player.y += player.dy;

            // Mantener jugador en pantalla
            if (player.y < 0) player.y = 0;
            if (player.y > canvas.height - player.height) player.y = canvas.height - player.height;

            // Generar objetos
            spawnObjects();

            // Actualizar y dibujar estrellas
            for (let i = stars.length - 1; i >= 0; i--) {
                stars[i].update();
                stars[i].draw();
                if (stars[i].isOffScreen()) {
                    stars.splice(i, 1);
                }
            }

            // Actualizar y dibujar cristales
            for (let i = crystals.length - 1; i >= 0; i--) {
                crystals[i].update();
                crystals[i].draw();
                if (crystals[i].isOffScreen()) {
                    crystals.splice(i, 1);
                }
            }

            // Actualizar y dibujar meteoros
            for (let i = meteors.length - 1; i >= 0; i--) {
                meteors[i].update();
                meteors[i].draw();
                if (meteors[i].isOffScreen()) {
                    meteors.splice(i, 1);
                }
            }

            // Actualizar y dibujar part√≠culas
            for (let i = particles.length - 1; i >= 0; i--) {
                particles[i].update();
                particles[i].draw();
                if (particles[i].life <= 0 || particles[i].size <= 0) {
                    particles.splice(i, 1);
                }
            }

            // Dibujar jugador
            drawPlayer();

            // Verificar colisiones
            checkCollisions();

            // Continuar el bucle
            requestAnimationFrame(gameLoop);
        }

        // Funci√≥n para iniciar el juego
        function startGame() {
            document.getElementById('instructions').style.display = 'none';
            document.getElementById('gameOver').style.display = 'none';
            gameRunning = true;
            
            // Reiniciar valores
            score = 0;
            level = 1;
            gameSpeed = 2;
            player.x = 100;
            player.y = canvas.height / 2;
            player.dy = 0;
            player.trail = [];
            
            // Limpiar arrays
            particles = [];
            stars = [];
            crystals = [];
            meteors = [];
            
            updateUI();
            gameLoop();
        }

        // Funci√≥n para reiniciar el juego
        function restartGame() {
            startGame();
        }

        // Funci√≥n de game over
        function gameOver() {
            gameRunning = false;
            document.getElementById('finalScore').textContent = score;
            document.getElementById('finalLevel').textContent = level;
            document.getElementById('gameOver').style.display = 'block';
        }

        // Inicializar el juego
        resizeCanvas();
    </script>
</body>
</html>
